@* @using InventoryManager.Models.Entities *@
@using InventoryManager.Models.ViewModels
@model IEnumerable<ProductListViewModel>

@{
    ViewData["Title"] = "Inventory Management System";
}

<h1><i class="bi bi-boxes"></i> Inventory Management System</h1>

<p>
    <a asp-action="Create" class="btn btn-primary"><i class="bi bi-plus-lg"></i> Add Product</a>
</p>

<div class="p-4 bg-white shadow-sm rounded">

    <form method="get" class="row g-4 mb-3">
        <div class="col-md-5">
            <label class="form-label">Search Products</label>
            <div class="input-group">
                <span class="input-group-text">
                    <i class="bi bi-search"></i>
                </span>
                <input type="text" name="ProductName" class="form-control" placeholder="Search by product name..." />
            </div>
        </div>

        @* Improve: After selecting option and submit, select the selected one *@
        <div class="col-md-5">
            <label class="form-label ">Filter by Category</label>
            <select name="Category" class="form-select">
                <option value="">All Categories</option>
                @foreach (var category in Enum.GetNames(typeof(InventoryManager.Models.Entities.Category)))
                {
                    <option value="@category">@category</option>
                }
            </select>
        </div>
        <div class="col-md-2">
            <label class="form-label">Click to Search</label>
            <button type="submit" class="btn btn-primary w-100">Search</button>
        </div>
    </form>
</div>

<table class="table table-striped mt-4">
    <thead class="table-primary">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Id)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Category)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Price)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Quantity)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Status)
            </th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Id)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Category)
                </td>
                <td>
                    $@Html.DisplayFor(modelItem => item.Price)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Quantity)
                </td>
                <td>
                    @if (item.Status == QuantityStatus.InStock)
                    {
                        <span class="badge rounded-pill bg-success">In Stock</span>
                    }
                    else if (item.Status == QuantityStatus.LowStock)
                    {
                        <span class="badge rounded-pill bg-warning">Low Stock</span>
                    }
                    else
                    {
                        <span class="badge rounded-pill bg-danger">Out of Stock</span>
                    }
                </td>
                <td>
                    <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-sm btn-info"><i class="bi bi-eye-fill"></i> Details</a>
                    <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-warning"><i class="bi bi-pencil-square"></i> Edit</a>
                    <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-sm btn-danger"><i class="bi bi-trash3-fill"></i> Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>
